unit LO_ArbolBinario; // JUGADORES


// //C:\Users\ezeko\Google Drive\Juan 23\PROG 2\FinalesViejos\Programación II - TP Final año 2010-Adan Gatica\Programación II - TP Final año 2010-Adan Gatica\Librerias\Clientes

interface

uses SysUtils, Math, Windows, Messages, Variants, Classes, Graphics, Controls,
  Forms,
  Dialogs, Menus, StdCtrls, jpeg;

const
  _posnula_arbol = -1;
  _posnula_archivo = -1;
  _clave_nula_archivo = '00000000';
  _nombre_carpeta = 'Archivos\';
  _RUTA = 'C:\Users\ezeko\Google Drive\Juan 23\PROG 2\MIO\TRABAJOFINALDELPHI\Archivos\';
  _ARCHIVO_DATOS = 'ArbolBinario.DATOS';
  _ARCHIVO_CONTROL = 'ArbolBinario.Control';

  _ARCHIVO_INDICE_ID = 'ArbolBinario.ID';
  _ARCHIVO_INDICE_NICK = 'ArbolBinario.NICK';

type
  tIDusuario = string[10];
  tcodrubro = 100 .. 999;
  tClaveArchi = tIDusuario;
  tClaveArbol = string[60];
  tcadena = string[40];
  tposarbol = _posnula_arbol .. maxint;
  tposarchi = _posnula_archivo .. maxint;
  tEstadoJuegador = (Conectado = 0, Desconectado = 1, Baja = 2, Bloqueado = 3);


  // ARCHIVOS  ///////////////////////////////////////

  tRegDatos = record
    nick: String[20]; // 10 caracteres en mayus
    password: string[20];
    clave: tIDusuario; // es el ID USUARIO
    nombre: string[10];
    fechaAlta: TDateTime; // sysdate de la fecha alta
    foto: tjpegimage;
    mail: string[20];
    estado: tEstadoJuegador;
    // C(conectado)- D(desco)- B(baja) - X(bloqueado por admin)
    fechaUltimaConexion: TDateTime;
  end;

  tRegControl = record
    ultimo: tposarchi;
    ultimoIDinterno: string[10];
  end;

  ArchivoControl = file of tRegControl;
  ArchivoDatos = file of tRegDatos;

  MeArchivos = record
    D: ArchivoDatos;
    C: ArchivoControl;
  end;

  // ARBOLES ////////////////////////////////

  tNodoIndice = record
    clave: tClaveArbol; // esto va a ser el ID o el NICK
    PosEnDatos: tposarchi;
    padre, hi, hd: tposarbol;
    borrado: boolean;
    nivel: integer;
  end;

  tControlArbol = record
    raiz: tposarbol;
    borrados: tposarbol;
    cantidad: integer;
    cant_niveles: integer;
  end;

  ArchivoIndiceArbol = file of tNodoIndice;
  ArchivoControlArbol = file of tControlArbol;

  MeArbol = record
    D: ArchivoIndiceArbol;
    C: ArchivoControlArbol;
  end;

var
  MeJUGADORES: MeArchivos;
  MeID: MeArbol;
  MeNICK: MeArbol;
  NodoIndice: tNodoIndice;

  // AUX
function IsOpen(const txt: textFile): boolean;
function IsFileInUse(fName: string): boolean;
// ARBOLES ///////////////////////////////////////////////
Procedure CrearMe_Indice(var Arbol: MeArbol;
  Nombre_Archivo_Control, Nombre_Archivo_Datos: string);
procedure AbrirMe_Indice(var Arbol: MeArbol);
procedure Cerrarme_indice(var Arbol: MeArbol);
Procedure InsertarNodo_Indice(var Arbol: MeArbol; var nodo: tNodoIndice;
  pos: tposarchi);
Procedure EliminarNodo_Indice(var Arbol: MeArbol; pos: tposarbol);
Procedure ModificarInfoMe_Indice(var Arbol: MeArbol; pos: tposarbol;
  nodo: tNodoIndice);
Function Cantidad_Indice(var Arbol: MeArbol): integer;
Function ObtenerInfo_Indice(var Arbol: MeArbol; pos: tposarbol): tNodoIndice;
Function BuscarNodo_Indice(var Arbol: MeArbol; clave: tClaveArbol;
  var pos: tposarbol): boolean;
Function ArbolVacio_Indice(Arbol: MeArbol): boolean;
Function PosNula_Indice(Arbol: MeArbol): tposarbol;
Function Raiz_Indice(var Arbol: MeArbol): tposarbol;
Function Anterior_Indice(var Arbol: MeArbol; pos: tposarbol): tposarbol;
Function ProximoIzq_Indice(Arbol: MeArbol; pos: tposarbol): tposarbol;
Function ProximoDer_Indice(var Arbol: MeArbol; pos: tposarbol): tposarbol;
// BALANCEO ARBOLES //////////////////////////////////////
Procedure AVL_Indice(Arbol: MeArbol; raiz: tposarbol; var PosNodo: tposarbol;
  Var Balance: boolean);
Function ProfundidadNodo(Arbol: MeArbol; raiz: tposarbol): integer;
Procedure RightRight(var Arbol: MeArbol; PosNodo: tposarbol);
Procedure LeftLeft(var Arbol: MeArbol; PosNodo: tposarbol);
Procedure LeftRight(var Arbol: MeArbol; PosNodo: tposarbol);
Procedure RightLeft(var Arbol: MeArbol; PosNodo: tposarbol);
Procedure DisminuirNiveles(var Arbol: MeArbol; raiz: tposarbol);
Function CantidadNiveles(Arbol: MeArbol): integer;
Function FactorEquilibrio(Arbol: MeArbol; PosNodo: tposarbol): integer;
Procedure CasoDeDesequilibrio(Arbol: MeArbol; PosNodo: tposarbol);
procedure BalancearArbol_Indice(var me: MeArbol);

// ARCHIVOS (JUGADORES)//////////////////////////////////
Procedure CrearMe_Archivos(var me: MeArchivos;
  Nombre_Archivo_Control, Nombre_Archivo_Datos: string);
Procedure AbrirMe_Archivos(var me: MeArchivos);
Procedure CerrarMe_Archivos(var me: MeArchivos);
Procedure InsertarInfoMe_Archivos(Var me: MeArchivos; pos: tposarchi;
  reg: tRegDatos);
Procedure EliminarInfoMe_Archivos(var me: MeArchivos; pos: tposarchi);
Procedure ModificarInfoMe_Archivos(var me: MeArchivos; pos: tposarchi;
  reg: tRegDatos);
Procedure ObtenerInfoMe_Archivos(var me: MeArchivos; pos: tposarchi;
  var reg: tRegDatos);
Procedure EliminarRepetidos_Archivos(var me: MeArchivos);
Function Primero_Archivos(var me: MeArchivos): tposarchi;
Function Ultimo_Archivos(var me: MeArchivos): tposarchi;
Function Proximo_Archivos(var me: MeArchivos; pos: tposarchi): tposarchi;
Function Anterior_Archivos(var me: MeArchivos; pos: tposarchi): tposarchi;
Function BuscarInfoMe_Archivos(var me: MeArchivos; clave: tClaveArchi;
  var pos: tposarchi): boolean;
Function MeVacio_Archivos(var me: MeArchivos): boolean;
Function MeLleno_Archivos(var me: MeArchivos): boolean;
Function PosNula_Archivos(var me: MeArchivos): tposarchi;
Function ClaveNula_Archivos(var me: MeArchivos): tClaveArchi;
Function ObtenerUltimoID_Archivos(var me: MeArchivos): tIDusuario;
Function ObtenerProximoID_Archivos(var me: MeArchivos): tIDusuario;

implementation

Procedure CrearMe_Indice(var Arbol: MeArbol;
  Nombre_Archivo_Control, Nombre_Archivo_Datos: string);
var
  RC: tControlArbol;
  ioD, ioC: integer;
begin
  assign(Arbol.D, _RUTA + Nombre_Archivo_Datos);
  assign(Arbol.C, _RUTA + Nombre_Archivo_Control);
{$I-}
  reset(Arbol.D);
  ioD := IoResult;
  reset(Arbol.C);
  ioC := IoResult;
  if (ioD <> 0) or (ioC <> 0) then
  begin
    Rewrite(Arbol.D);
    Rewrite(Arbol.C);
    RC.raiz := _posnula_arbol;
    RC.cantidad := 0;
    RC.cant_niveles := 0;
    RC.borrados := _posnula_arbol;
    Write(Arbol.C, RC);
  end;
  Close(Arbol.D);
  Close(Arbol.C);
{$I+}
end;

procedure AbrirMe_Indice(var Arbol: MeArbol);
begin
  reset(Arbol.C);
  reset(Arbol.D);

end;

procedure Cerrarme_indice(var Arbol: MeArbol);
begin
  if IoResult <> 0 then // no se si esto esta bien
  begin
    Close(Arbol.C);
    Close(Arbol.D);
  end;

end;

Procedure InsertarNodo_Indice(var Arbol: MeArbol; var nodo: tNodoIndice;
  pos: tposarchi);
var // El pos que entra es la posicion fisica de su padre...
  posnueva: tposarbol;
  reg, rd: tNodoIndice;
  RC: tControlArbol;
begin
  seek(Arbol.C, 0);
  read(Arbol.C, RC);
  if RC.borrados = _posnula_arbol then
  begin
    posnueva := filesize(Arbol.D);
  end
  else
  begin
    posnueva := RC.borrados;
    seek(Arbol.D, posnueva);
    read(Arbol.D, rd);
    RC.borrados := rd.hi;
  end;

  if (RC.raiz = _posnula_arbol) then // Arbol vacio
  begin
    nodo.padre := _posnula_arbol;
    nodo.hi := _posnula_arbol;
    nodo.hd := _posnula_arbol;
    nodo.nivel := 1;
    RC.raiz := posnueva;
  end
  else // Hoja
  begin
    seek(Arbol.D, pos);
    read(Arbol.D, reg);
    nodo.padre := pos;
    nodo.hd := _posnula_arbol;
    nodo.hi := _posnula_arbol;
    nodo.nivel := reg.nivel + 1;
    if (nodo.clave <= reg.clave) then
    begin
      reg.hi := posnueva;
    end
    else
    begin
      reg.hd := posnueva;
    end;
    seek(Arbol.D, pos);
    write(Arbol.D, reg);
  end;

  If nodo.nivel > RC.cant_niveles then
    RC.cant_niveles := nodo.nivel;
  RC.cantidad := RC.cantidad + 1;
  seek(Arbol.D, posnueva);
  write(Arbol.D, nodo); // se escribe el elemento en el archivo
  seek(Arbol.C, 0);
  write(Arbol.C, RC); // se actualiza el registro control

  BalancearArbol_Indice(arbol);
end;

Procedure EliminarNodo_Indice(var Arbol: MeArbol; pos: tposarbol);
var
  rd: tNodoIndice;
  RC: tControlArbol;
  rAux, RHD, RDP, RHI: tNodoIndice;
  posAux: tposarbol;

begin
  seek(Arbol.C, 0);
  read(Arbol.C, RC);
  seek(Arbol.D, pos);
  read(Arbol.D, rd);
  if (pos = RC.raiz) and (rd.hi = _posnula_arbol) and (rd.hd = _posnula_arbol)
  then
  begin
    RC.raiz := _posnula_arbol;
  end
  else
  begin
    if (rd.hi = _posnula_arbol) and (rd.hd = _posnula_arbol) then
    // eliminar de una hoja
    begin
      seek(Arbol.D, rd.padre);
      read(Arbol.D, RDP);
      If RDP.hi = pos then
        RDP.hi := _posnula_arbol
      else
        RDP.hd := _posnula_arbol;
      seek(Arbol.D, rd.padre);
      write(Arbol.D, RDP);
    end
    else
    begin
      if (rd.hi <> _posnula_arbol) and (rd.hd <> _posnula_arbol) then
      // Caso general
      begin
        If pos <> RC.raiz then
        begin
          seek(Arbol.D, rd.padre);
          read(Arbol.D, RDP);
          If RDP.hi = pos then
            RDP.hi := rd.hd
          else
            RDP.hd := rd.hd;
          seek(Arbol.D, rd.padre);
          Write(Arbol.D, RDP);
        end
        else
          RC.raiz := rd.hd;

        seek(Arbol.D, rd.hd);
        read(Arbol.D, RHD);
        RHD.padre := rd.padre;
        posAux := rd.hd;
        rAux := RHD;
        While rAux.hi <> _posnula_arbol do
        begin
          seek(Arbol.D, posAux);
          read(Arbol.D, rAux);
          If rAux.hi <> _posnula_arbol then
            posAux := rAux.hi;
        end;
        seek(Arbol.D, rd.hi);
        Read(Arbol.D, RHI);
        RHI.padre := posAux;
        rAux.hi := rd.hi;
        seek(Arbol.D, rd.hi);
        Write(Arbol.D, RHI);
        seek(Arbol.D, posAux);
        Write(Arbol.D, rAux);
        If posAux <> rd.hd then
        begin
          seek(Arbol.D, rd.hd);
          Write(Arbol.D, RHD);
        end;
      end
      else
      begin
        If pos <> RC.raiz then
        begin
          seek(Arbol.D, rd.padre);
          Read(Arbol.D, RDP);
          If RDP.hi = pos then
          begin
            If rd.hi = _posnula_arbol then
            begin
              RDP.hi := rd.hd;
              seek(Arbol.D, rd.hd);
              read(Arbol.D, RHD);
              RHD.padre := rd.padre;
              seek(Arbol.D, rd.hd);
              write(Arbol.D, RHD);
            end
            else
            begin
              RDP.hi := rd.hi;
              seek(Arbol.D, rd.hi);
              read(Arbol.D, RHI);
              RHI.padre := rd.padre;
              seek(Arbol.D, rd.hi);
              write(Arbol.D, RHI);
            end
          end
          else If rd.hi = _posnula_arbol then
          begin
            RDP.hd := rd.hd;
            seek(Arbol.D, rd.hd);
            read(Arbol.D, RHD);
            RHD.padre := rd.padre;
            seek(Arbol.D, rd.hd);
            write(Arbol.D, RHD);
          end
          else
          begin
            RDP.hd := rd.hi;
            seek(Arbol.D, rd.hi);
            read(Arbol.D, RHI);
            RHI.padre := rd.padre;
            seek(Arbol.D, rd.hi);
            write(Arbol.D, RHI);
          end;
          seek(Arbol.D, rd.padre);
          write(Arbol.D, RDP);
        end
        else If rd.hi = _posnula_arbol then
          RC.raiz := rd.hd
        else
          RC.raiz := rd.hi;
      end;
    end;
  end;
  rd.hi := RC.borrados;
  rd.hd := RC.borrados;
  RC.borrados := pos;
  RC.cantidad := RC.cantidad - 1;
  seek(Arbol.C, 0);
  write(Arbol.C, RC);
end;

Procedure ModificarInfoMe_Indice(var Arbol: MeArbol; pos: tposarbol;
  nodo: tNodoIndice);
begin
  seek(Arbol.D, pos);
  write(Arbol.D, nodo);
end;

function Cantidad_Indice(var Arbol: MeArbol): integer;
var
  RC: tControlArbol;
begin
  seek(Arbol.C, 0);
  read(Arbol.C, RC);
  Cantidad_Indice := RC.cantidad;
end;

Function ArbolVacio_Indice(Arbol: MeArbol): boolean;
var
  RC: tControlArbol;
begin
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);
  If RC.raiz = _posnula_arbol then
    ArbolVacio_Indice := true
  else
    ArbolVacio_Indice := false;
end;

Function Raiz_Indice(var Arbol: MeArbol): tposarbol;
var
  RC: tControlArbol;
begin
  seek(Arbol.C, 0);
  read(Arbol.C, RC);
  Raiz_Indice := RC.raiz;
end;

Function Anterior_Indice(var Arbol: MeArbol; pos: tposarbol): tposarbol;
var
  rd: tNodoIndice;
begin
  seek(Arbol.D, pos);
  read(Arbol.D, rd);
  Anterior_Indice := rd.padre;
end;

Function ProximoIzq_Indice(Arbol: MeArbol; pos: tposarbol): tposarbol;
var
  rd: tNodoIndice;
begin
  seek(Arbol.D, pos);
  read(Arbol.D, rd);
  ProximoIzq_Indice := rd.hi;
end;

Function ProximoDer_Indice(var Arbol: MeArbol; pos: tposarbol): tposarbol;
var
  rd: tNodoIndice;
begin
  seek(Arbol.D, pos);
  read(Arbol.D, rd);
  ProximoDer_Indice := rd.hd;
end;

Function ObtenerInfo_Indice(var Arbol: MeArbol; pos: tposarbol): tNodoIndice;
var
  rd: tNodoIndice;
begin
  seek(Arbol.D, pos);
  read(Arbol.D, rd);
  ObtenerInfo_Indice := rd;
end;

Function BuscarNodo_Indice(var Arbol: MeArbol; clave: tClaveArbol;
  var pos: tposarbol): boolean; // Buscar iterativo
var
  reg: tNodoIndice;
  RC: tControlArbol;
  encont: boolean;
  posPadre: tposarbol;
begin
  seek(Arbol.C, 0);
  read(Arbol.C, RC);
  pos := RC.raiz;
  encont := false;
  posPadre := _posnula_arbol;
  while (not encont) and (pos <> _posnula_arbol) do
  begin
    seek(Arbol.D, pos);
    read(Arbol.D, reg);
    if (clave = reg.clave) then
    begin
      encont := true;
    end
    else
    begin
      if (reg.clave > clave) then
      begin
        posPadre := pos;
        pos := reg.hi;
      end
      else
      begin
        posPadre := pos;
        pos := reg.hd;
      end;
    end;
  end;
  if (not encont) then
  begin
    pos := posPadre;
  end;
  BuscarNodo_Indice := encont;
end;

Function PosNula_Indice(Arbol: MeArbol): tposarbol;
begin
  PosNula_Indice := _posnula_arbol;
end;

Procedure DisminuirNiveles(var Arbol: MeArbol; raiz: tposarbol);
var
  N: tNodoIndice;
begin
  If raiz = PosNula_Indice(Arbol) then
    exit;
  // Primero recursivo tendiendo a la Izquierda
  DisminuirNiveles(Arbol, ProximoIzq_Indice(Arbol, raiz));
  N := ObtenerInfo_Indice(Arbol, raiz);
  N.nivel := N.nivel - 1;
  seek(Arbol.D, raiz);
  Write(Arbol.D, N);
  // Recursividad tendiendo a la Derecha.
  DisminuirNiveles(Arbol, ProximoDer_Indice(Arbol, raiz));
end;

{ ****************************************************************************** }
Procedure AumentarNiveles(var Arbol: MeArbol; raiz: tposarbol);
var
  N: tNodoIndice;
begin
  If raiz = PosNula_Indice(Arbol) then
    exit;
  // Primero recursivo tendiendo a la Izquierda
  DisminuirNiveles(Arbol, ProximoIzq_Indice(Arbol, raiz));
  N := ObtenerInfo_Indice(Arbol, raiz);
  N.nivel := N.nivel + 1;
  seek(Arbol.D, raiz);
  Write(Arbol.D, N);
  // Recursividad tendiendo a la Derecha.
  DisminuirNiveles(Arbol, ProximoDer_Indice(Arbol, raiz));
end;

{ ****************************************************************************** }
Procedure RightRight(var Arbol: MeArbol; PosNodo: tposarbol);
Var
  NodoArriba, NodoAbajo, NodoAnterior: tNodoIndice;
  RC: tControlArbol;
  posAux: tposarbol;
begin

  seek(Arbol.D, PosNodo);
  Read(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.hd);
  Read(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);

  { Cambio enlaces }
  posAux := NodoAbajo.hi;
  NodoAbajo.padre := NodoArriba.padre;
  NodoAbajo.hi := PosNodo;
  NodoArriba.padre := NodoArriba.hd;
  NodoArriba.hd := posAux;;

  { Es necesario cambiar al nodo anterior? }
  { ******************************** }
  If NodoAbajo.padre <> _posnula_arbol then
  begin
    seek(Arbol.D, NodoAbajo.padre);
    Read(Arbol.D, NodoAnterior);
    If NodoAnterior.hd = PosNodo then
      NodoAnterior.hd := NodoArriba.padre
    Else
      NodoAnterior.hi := NodoArriba.padre;
    seek(Arbol.D, NodoAbajo.padre);
    Write(Arbol.D, NodoAnterior);
  end;
  { ******************************** }

  { Cambio el campo nivel }
  NodoAbajo.nivel := NodoAbajo.nivel - 1;
  NodoArriba.nivel := NodoArriba.nivel + 1;

  { Verifico que el del drama no haya sido la raiz }
  If PosNodo = RC.raiz then
    RC.raiz := NodoArriba.padre;

  seek(Arbol.D, PosNodo);
  Write(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.padre);
  Write(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Write(Arbol.C, RC);

  DisminuirNiveles(Arbol, NodoAbajo.hd);
  AumentarNiveles(Arbol, NodoArriba.hi);
end;

{ ****************************************************************************** }
Procedure LeftLeft(var Arbol: MeArbol; PosNodo: tposarbol);
Var
  NodoArriba, NodoAbajo, NodoAnterior: tNodoIndice;
  RC: tControlArbol;
  posAux: tposarbol;
begin

  seek(Arbol.D, PosNodo);
  Read(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.hi);
  Read(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);

  { Cambio enlaces }
  posAux := NodoAbajo.hd;
  NodoAbajo.padre := NodoArriba.padre;
  NodoAbajo.hd := PosNodo;
  NodoArriba.padre := NodoArriba.hi;
  NodoArriba.hi := posAux;;

  { Es necesario cambiar al nodo anterior? }
  { ******************************** }
  If NodoAbajo.padre <> _posnula_arbol then
  begin
    seek(Arbol.D, NodoAbajo.padre);
    Read(Arbol.D, NodoAnterior);
    If NodoAnterior.hd = PosNodo then
      NodoAnterior.hd := NodoArriba.padre
    Else
      NodoAnterior.hi := NodoArriba.padre;
    seek(Arbol.D, NodoAbajo.padre);
    Write(Arbol.D, NodoAnterior);
  end;
  { ******************************** }

  { Cambio el campo nivel }
  NodoAbajo.nivel := NodoAbajo.nivel - 1;
  NodoArriba.nivel := NodoArriba.nivel + 1;

  { Verifico que el del drama no haya sido la raiz }
  If PosNodo = RC.raiz then
    RC.raiz := NodoArriba.padre;

  seek(Arbol.D, PosNodo);
  Write(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.padre);
  Write(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Write(Arbol.C, RC);

  DisminuirNiveles(Arbol, NodoAbajo.hi);
  AumentarNiveles(Arbol, NodoArriba.hd);
end;

{ ****************************************************************************** }
Procedure LeftRight(var Arbol: MeArbol; PosNodo: tposarbol);
Var
  NodoArriba, NodoMedio, NodoAbajo, NodoAnterior: tNodoIndice;
  RC: tControlArbol;
  posAux, PosMedio, PosAbajo: tposarbol;
begin

  seek(Arbol.D, PosNodo);
  Read(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.hi);
  Read(Arbol.D, NodoMedio);
  seek(Arbol.D, NodoMedio.hd);
  Read(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);

  PosMedio := NodoArriba.hi;
  PosAbajo := NodoMedio.hd;
  posAux := NodoArriba.padre;

  NodoArriba.padre := NodoMedio.hd;
  NodoArriba.hi := NodoAbajo.hd;

  NodoMedio.padre := NodoMedio.hd;
  NodoMedio.hd := NodoAbajo.hi;

  NodoAbajo.padre := posAux;
  NodoAbajo.hd := PosNodo;
  NodoAbajo.hi := PosMedio;

  If NodoAbajo.padre <> _posnula_arbol then
  begin
    seek(Arbol.D, NodoAbajo.padre);
    Read(Arbol.D, NodoAnterior);
    If NodoAnterior.hd = PosNodo then
      NodoAnterior.hd := PosAbajo
    Else
      NodoAnterior.hi := PosAbajo;
    seek(Arbol.D, NodoAbajo.padre);
    Write(Arbol.D, NodoAnterior);
  end;
  { Cambio el campo nivel }
  NodoAbajo.nivel := NodoAbajo.nivel - 2;
  NodoArriba.nivel := NodoArriba.nivel + 1;

  { Verifico que el del drama no haya sido la raiz }
  If PosNodo = RC.raiz then
    RC.raiz := NodoArriba.padre;

  seek(Arbol.D, PosNodo);
  write(Arbol.D, NodoArriba);
  seek(Arbol.D, PosMedio);
  write(Arbol.D, NodoMedio);
  seek(Arbol.D, PosAbajo);
  write(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Write(Arbol.C, RC);

  DisminuirNiveles(Arbol, NodoArriba.hi);
  AumentarNiveles(Arbol, NodoArriba.hd);
  DisminuirNiveles(Arbol, NodoMedio.hd);

end;

{ ****************************************************************************** }
Procedure RightLeft(var Arbol: MeArbol; PosNodo: tposarbol);
Var
  NodoArriba, NodoMedio, NodoAbajo, NodoAnterior: tNodoIndice;
  RC: tControlArbol;
  posAux, PosMedio, PosAbajo: tposarbol;
begin

  seek(Arbol.D, PosNodo);
  Read(Arbol.D, NodoArriba);
  seek(Arbol.D, NodoArriba.hd);
  Read(Arbol.D, NodoMedio);
  seek(Arbol.D, NodoMedio.hi);
  Read(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);

  PosMedio := NodoArriba.hd;
  PosAbajo := NodoMedio.hi;
  posAux := NodoArriba.padre;

  NodoArriba.padre := NodoMedio.hi;
  NodoArriba.hd := NodoAbajo.hi;

  NodoMedio.padre := NodoMedio.hi;
  NodoMedio.hi := NodoAbajo.hd;

  NodoAbajo.padre := posAux;
  NodoAbajo.hi := PosNodo;
  NodoAbajo.hd := PosMedio;

  If NodoAbajo.padre <> _posnula_arbol then
  begin
    seek(Arbol.D, NodoAbajo.padre);
    Read(Arbol.D, NodoAnterior);
    If NodoAnterior.hd = PosNodo then
      NodoAnterior.hd := PosAbajo
    Else
      NodoAnterior.hi := PosAbajo;
    seek(Arbol.D, NodoAbajo.padre);
    Write(Arbol.D, NodoAnterior);
  end;
  { Cambio el campo nivel }
  NodoAbajo.nivel := NodoAbajo.nivel - 2;
  NodoArriba.nivel := NodoArriba.nivel + 1;

  { Verifico que el del drama no haya sido la raiz }
  If PosNodo = RC.raiz then
    RC.raiz := NodoArriba.padre;

  seek(Arbol.D, PosNodo);
  write(Arbol.D, NodoArriba);
  seek(Arbol.D, PosMedio);
  write(Arbol.D, NodoMedio);
  seek(Arbol.D, PosAbajo);
  write(Arbol.D, NodoAbajo);
  seek(Arbol.C, 0);
  Write(Arbol.C, RC);

  DisminuirNiveles(Arbol, NodoArriba.hd);
  AumentarNiveles(Arbol, NodoArriba.hi);
  DisminuirNiveles(Arbol, NodoMedio.hi);

end;

{ ****************************************************************************** }
Procedure AVL_Indice(Arbol: MeArbol; raiz: tposarbol; var PosNodo: tposarbol;
  Var Balance: boolean);
{ Indica si el Arbol esta balanceado. Si no lo esta me envia la pos del nodo
  que esta causando el desequilibrio. Este siempre es el nodo de mas ALTO nivel.
  Se balancea de los nodos mas pesados hasta llegar a la raiz. }
var
  Result: integer;
begin
  // Si lo que entra es posNula sale.
  If (raiz = PosNula_Indice(Arbol)) then
    exit;
  // Recursivo tendiendo a la Izquierda
  AVL_Indice(Arbol, ProximoIzq_Indice(Arbol, raiz), PosNodo, Balance);
  // Recursivo tendiendo a la derecha
  AVL_Indice(Arbol, ProximoDer_Indice(Arbol, raiz), PosNodo, Balance);

  Result := FactorEquilibrio(Arbol, raiz);

  If Result < 0 then
    Result := Result * (-1);

  { Cuando conoce la posicion del nodo en desequilibrio no lo cambia }
  If (Result > 1) then
    Balance := false;

  If (PosNodo = PosNula_Indice(Arbol)) and (not Balance) then
    PosNodo := raiz;
end;

{ ****************************************************************************** }
Function FactorEquilibrio(Arbol: MeArbol; PosNodo: tposarbol): integer;
var
  N: tNodoIndice;
  Ti, Td: integer;
begin
  If PosNodo = -1 then
    FactorEquilibrio := 0
  Else
  begin
    // Guardo en N el nodo indice.
    N := ObtenerInfo_Indice(Arbol, PosNodo);

    // Calculo la profundidad de ambos hijos.
    If N.hi <> PosNula_Indice(Arbol) then
      Ti := ProfundidadNodo(Arbol, N.hi)
    Else
      Ti := 0;
    If N.hd <> PosNula_Indice(Arbol) then
      Td := ProfundidadNodo(Arbol, N.hd)
    Else
      Td := 0;

    { -->AVL es cuando de todo nodo |Altura(Ti)-Altura(Td)|<=1.
      --->Ti y Td son los subarboles de un nodo.
      --> Aca Ti y Td contienen la Altura de dicho subarbol. }
    FactorEquilibrio := Ti - Td;
  end;
end;

{ ****************************************************************************** }
Procedure CasoDeDesequilibrio(Arbol: MeArbol; PosNodo: tposarbol);
var
  N: tNodoIndice;
begin

  N := ObtenerInfo_Indice(Arbol, PosNodo);
  { Si el factor de desequilibrio es Positivo
    significa que hay que revisar el lado izquierdo }
  If FactorEquilibrio(Arbol, PosNodo) >= 0 then
  begin
    If FactorEquilibrio(Arbol, N.hi) >= 0 then
      LeftLeft(Arbol, PosNodo)
    Else
      LeftRight(Arbol, PosNodo);
  end
  Else
  begin
    If FactorEquilibrio(Arbol, N.hd) >= 0 then
      RightLeft(Arbol, PosNodo)
    Else
      RightRight(Arbol, PosNodo);
  end;

end;

{ ****************************************************************************** }
Function ProfundidadNodo(Arbol: MeArbol; raiz: tposarbol): integer;
var
  nodo: tNodoIndice;
  Profundidad: integer;
  { Procedimiento interno......................................................... }
  Procedure ProfundidadArbol(Arbol: MeArbol; raiz: tposarbol;
    var Prof: integer);
  var
    N: tNodoIndice;
  begin
    If raiz = PosNula_Indice(Arbol) then
      exit;
    // Primero recursivo tendiendo a la Izquierda
    ProfundidadArbol(Arbol, ProximoIzq_Indice(Arbol, raiz), Prof);
    // Recursividad tendiendo a la Derecha.
    ProfundidadArbol(Arbol, ProximoDer_Indice(Arbol, raiz), Prof);

    // Guardo en N el nodo indice.
    N := ObtenerInfo_Indice(Arbol, raiz);

    If N.nivel > Prof then
      Prof := N.nivel;
  end;

{ ............................................................................ }
Begin
  Profundidad := 0;
  nodo := ObtenerInfo_Indice(Arbol, raiz);
  ProfundidadArbol(Arbol, raiz, Profundidad);
  ProfundidadNodo := (Profundidad - nodo.nivel) + 1;
End;

{ ****************************************************************************** }
Function CantidadNiveles(Arbol: MeArbol): integer;
var
  RC: tControlArbol;
begin
  seek(Arbol.C, 0);
  Read(Arbol.C, RC);
  CantidadNiveles := RC.cant_niveles;
end;

// ARCHIVOS /////////////////////////////////////////////////////////////////////
Procedure CrearMe_Archivos(var me: MeArchivos;
  Nombre_Archivo_Control, Nombre_Archivo_Datos: string);
Var
  RC: tRegControl;
Begin
  assign(me.D,
    'C:\Users\ezeko\Google Drive\Juan 23\PROG 2\MIO\TRABAJOFINALDELPHI\Archivos\'
    + Nombre_Archivo_Datos);
  assign(me.C,
    'C:\Users\ezeko\Google Drive\Juan 23\PROG 2\MIO\TRABAJOFINALDELPHI\Archivos\'
    + Nombre_Archivo_Control);
{$I-}
  reset(me.D);
  If IoResult <> 0 then
    Rewrite(me.D);
  reset(me.C);
  If IoResult <> 0 then
  begin
    Rewrite(me.C);
    RC.ultimoIDinterno := '0';
    RC.ultimo := _posnula_archivo;
    Write(me.C, RC);
  end;
  Close(me.C);
  Close(me.D);
{$I+}
end;

{ ****************************************************************************** }
Procedure AbrirMe_Archivos(var me: MeArchivos);
Begin
  reset(me.D);
  reset(me.C);
end;

{ ****************************************************************************** }
Procedure CerrarMe_Archivos(var me: MeArchivos);
Begin

  if IoResult <> 0 then
  begin
    Close(me.D);
    Close(me.C);

  end;
end;

function IsOpen(const txt: textFile): boolean;
const
  fmTextOpenRead = 55217;
  fmTextOpenWrite = 55218;
begin
  Result := (TTextRec(txt).Mode = fmTextOpenRead) or
    (TTextRec(txt).Mode = fmTextOpenWrite)
end;

function IsFileInUse(fName: string): boolean;
var
  HFileRes: HFILE;
begin
  Result := false;
  if not FileExists(fName) then
  begin
    exit;
  end;

  HFileRes := CreateFile(PChar(fName), GENERIC_READ or GENERIC_WRITE, 0, nil,
    OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

  Result := (HFileRes = INVALID_HANDLE_VALUE);

  if not(Result) then
  begin
    CloseHandle(HFileRes);
  end;
end;

{ ****************************************************************************** }
Function Primero_Archivos(var me: MeArchivos): tposarchi;
var
  RC: tRegControl;
begin
  seek(me.C, 0);
  read(me.C, RC);
  If RC.ultimo = _posnula_archivo then
    Primero_Archivos := _posnula_archivo
  else
    Primero_Archivos := 0;
end;

{ ****************************************************************************** }
Function Ultimo_Archivos(Var me: MeArchivos): tposarchi;
var
  RC: tRegControl;
Begin
  seek(me.C, 0);
  read(me.C, RC);
  Ultimo_Archivos := RC.ultimo;
end;

{ ****************************************************************************** }
Function Proximo_Archivos(var me: MeArchivos; pos: tposarchi): tposarchi;
var
  RC: tRegControl;
begin
  seek(me.C, 0);
  read(me.C, RC);
  If pos <> RC.ultimo then
    Proximo_Archivos := pos + 1
  else
    Proximo_Archivos := _posnula_archivo;
end;

{ ****************************************************************************** }
Function Anterior_Archivos(var me: MeArchivos; pos: tposarchi): tposarchi;
var
  RC: tRegControl;
begin
  seek(me.C, 0);
  read(me.C, RC);
  If pos <> 0 then
    Anterior_Archivos := pos - 1
  else
    Anterior_Archivos := _posnula_archivo;
end;

{ ****************************************************************************** }
Procedure InsertarInfoMe_Archivos(Var me: MeArchivos; pos: tposarchi;
  reg: tRegDatos);
Var
  RC: tRegControl;
  aux: tRegDatos;
  i: tposarchi;
begin
  seek(me.C, 0);
  read(me.C, RC);

  for i := RC.ultimo downto pos do
  begin
    seek(me.D, i);
    read(me.D, aux);
    seek(me.D, i + 1);
    write(me.D, aux);
  end;

  seek(me.D, pos);
  write(me.D, reg);
  RC.ultimo := RC.ultimo + 1;
  RC.ultimoIDinterno := reg.clave; // inttostr(strtoint(rc.ultimoIDinterno)+1);
  seek(me.C, 0);
  write(me.C, RC);
end;

{ ****************************************************************************** }
Procedure EliminarInfoMe_Archivos(var me: MeArchivos; pos: tposarchi);
var
  RC: tRegControl;
  aux: tRegDatos;
  i: tposarchi;
Begin
  seek(me.C, 0);
  read(me.C, RC);

  for i := pos + 1 to RC.ultimo do
  begin
    seek(me.D, i);
    read(me.D, aux);
    seek(me.D, i - 1);
    write(me.D, aux);
  end;

  RC.ultimo := RC.ultimo - 1;
  seek(me.C, 0);
  write(me.C, RC);
end;

{ ****************************************************************************** }
Function BuscarInfoMe_Archivos(var me: MeArchivos; clave: tClaveArchi;
  var pos: tposarchi): boolean;
// busca en el archivo por la clave. Si encuentra devuelve la pos donde esta, dependiendo si esta vacio o no
// la ultima posicion+1 o la posicion 0
Var
  RC: tRegControl;
  rd: tRegDatos;
  encont: boolean;
  i, f, m: tposarchi;
Begin
  seek(me.C, 0);
  Read(me.C, RC);
  i := 0;
  f := RC.ultimo;
  encont := false;

  While (i <= f) and (not encont) do
  begin
    m := (i + f) div 2;
    seek(me.D, m);
    read(me.D, rd);
    If rd.clave = clave then
      encont := false
    else If clave < rd.clave then
      f := m - 1
    else
      i := m + 1;
  end;

  BuscarInfoMe_Archivos := encont;
  If encont then
    pos := m
  else If RC.ultimo = -1 then
    pos := 0
  Else
    pos := RC.ultimo + 1;
end;

{ ****************************************************************************** }
Function MeVacio_Archivos(var me: MeArchivos): boolean;
Var
  RC: tRegControl;
Begin
  seek(me.C, 0);
  read(me.C, RC);
  MeVacio_Archivos := (RC.ultimo = _posnula_archivo);
end;

{ ****************************************************************************** }
Function MeLleno_Archivos(var me: MeArchivos): boolean;
begin
  MeLleno_Archivos := false;
end;

{ ****************************************************************************** }
Procedure ModificarInfoMe_Archivos(var me: MeArchivos; pos: tposarchi;
  reg: tRegDatos);
begin
  seek(me.D, pos);
  write(me.D, reg);
end;

{ ****************************************************************************** }
Procedure ObtenerInfoMe_Archivos(var me: MeArchivos; pos: tposarchi;
  var reg: tRegDatos);
begin
  seek(me.D, pos);
  read(me.D, reg);
end;

{ ****************************************************************************** }
Function PosNula_Archivos(var me: MeArchivos): tposarchi;
begin
  PosNula_Archivos := _posnula_archivo;
end;

{ ****************************************************************************** }
Function ClaveNula_Archivos(var me: MeArchivos): tClaveArchi;
Begin
  ClaveNula_Archivos := _clave_nula_archivo;
end;

{ ****************************************************************************** }
Procedure EliminarRepetidos_Archivos(var me: MeArchivos);
Var
  RC: tRegControl;
  aux, r1, r2: tRegDatos;
  i, pos1, pos2: tposarchi;
Begin
  seek(me.C, 0);
  read(me.C, RC);
  pos1 := 0;

  While pos1 < RC.ultimo do
  begin
    pos2 := pos1 + 1;
    seek(me.D, pos1);
    read(me.D, r1);
    seek(me.D, pos2);
    read(me.D, r2);
    if r1.clave = r2.clave then
    begin
      for i := pos2 to RC.ultimo do
      begin
        seek(me.D, i);
        read(me.D, aux);
        seek(me.D, i - 1);
        write(me.D, aux);
      end;
    end
    else
      pos1 := pos2
  end;
  seek(me.C, 0);
  write(me.C, RC);
end;

Function ObtenerUltimoID_Archivos(var me: MeArchivos): tIDusuario;
var
  RC: tRegControl;
begin
  seek(me.C, 0);
  read(me.C, RC);
  Result := RC.ultimoIDinterno;
end;

Function ObtenerProximoID_Archivos(var me: MeArchivos): tIDusuario;
var
  RC: tRegControl;
begin
  seek(me.C, 0);
  read(me.C, RC);
  Result := inttostr(strtoint(RC.ultimoIDinterno) + 1);
end;

procedure BalancearArbol_Indice(var me: MeArbol);
var
  cont: integer;
  balanceado: boolean;
  pos: tposarbol;
  N: tNodoIndice;
begin
  balanceado := true;
  // AbrirMe_Indice (MeID);
  pos := _posnula_arbol;
  AVL_Indice(me, Raiz_Indice(me), pos, balanceado);
  if not balanceado then
  begin
    cont := 0;
    { El contador lo utilizo para prevenir que un bucle infinito por error
      acontezca, el cual según lo probado no deberia pasar }
    While (cont <= 99999) and (not balanceado) Do
    begin
      balanceado := true;
      pos := _posnula_arbol;
      // AbrirMe_Indice (MeID);
      AVL_Indice(me, Raiz_Indice(me), pos, balanceado);
      If (not balanceado) then
      begin
        N := ObtenerInfo_Indice(me, pos);
        CasoDeDesequilibrio(me, pos);
      end;
      cont := cont + 1;
      // CerrarMe_Indice (MeID);
    end;
  end;
end;

end.
